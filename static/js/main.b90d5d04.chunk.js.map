{"version":3,"sources":["Grid/helpers.ts","utils/index.ts","App.tsx","Grid/index.tsx","Form/index.tsx","StartingScreen/index.tsx","GameOverScreen/index.tsx","reportWebVitals.ts","index.tsx"],"names":["Direction","LinkedListNode","value","next","this","LinkedList","head","tail","node","getCoordsInDirection","coords","direction","Up","row","col","Rigth","Down","Left","isOutOfBounds","grid","length","getGrowthNodeCoords","snakeTail","currentDirection","tailNextNodeDirection","currentRow","currentCol","nextRow","nextCol","getNextNodeDirection","growthDirection","getOppositeDirection","currentTailCoords","randomIntFromInterval","min","max","Math","floor","random","GameStates","Grid","gridRows","gridCols","handleGameOver","score","setScore","maxPossibleCellValue","board","counter","push","createBoard","useState","rowSize","colSize","startingRow","round","startingCol","cell","getStartingSnakeLLValue","snake","Set","snakeCells","setSnakeCells","foodCell","setFoodCell","setDirection","delay","setDelay","useEffect","window","addEventListener","e","handleKeydown","callback","savedCallback","useRef","current","id","setInterval","clearInterval","useInterval","moveSnake","key","newDirection","currentHeadCoords","nextHeadCoords","nextHeadCell","has","newHead","currentHead","newSnakeCells","delete","add","growSnake","handleFoodConsumption","growthNodeCoords","newTailCell","newTail","currentTail","nextFoodCell","className","map","rowIndex","cellIndex","cellValue","getCellClassName","Form","handleSubmit","setGridCols","setGridRows","isStartScreen","onSubmit","Typography","variant","TextField","required","label","defaultValue","type","InputProps","inputProps","onChange","Number","target","style","width","Button","color","size","StartingScreen","handleStartGame","Paper","elevation","GameOverScreen","handleResetGame","App","START","gameState","setGameState","GAME_OVER","PLAING","AppBar","Toolbar","renderStage","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b90d5d04.chunk.js","sourcesContent":["export class LinkedListNode {\r\n  value: ListNodeValue;\r\n  next: LinkedListNode | null;\r\n\r\n  constructor(value: ListNodeValue) {\r\n    this.value = value;\r\n    this.next = null;\r\n  }\r\n}\r\n\r\nexport class LinkedList {\r\n  head: LinkedListNode;\r\n  tail: LinkedListNode | null;\r\n\r\n  constructor(value: ListNodeValue) {\r\n    const node = new LinkedListNode(value);\r\n    this.head = node;\r\n    this.tail = node;\r\n  }\r\n}\r\n\r\nexport const createBoard = (gridRows: number, gridCols: number): number[][] => {\r\n  let counter = 1;\r\n  const board = [];\r\n  for (let row = 0; row < gridRows; row++) {\r\n    const currentRow = [];\r\n    for (let col = 0; col < gridCols; col++) {\r\n      currentRow.push(counter++);\r\n    }\r\n    board.push(currentRow);\r\n  }\r\n  return board;\r\n};\r\n\r\nexport enum Direction {\r\n  Up = \"ArrowUp\",\r\n  Down = \"ArrowDown\",\r\n  Rigth = \"ArrowRight\",\r\n  Left = \"ArrowLeft\",\r\n}\r\n\r\nexport type Coords = {\r\n  row: number;\r\n  col: number;\r\n};\r\n\r\nexport type ListNodeValue = {\r\n  row: number;\r\n  col: number;\r\n  cell: number;\r\n};\r\n\r\nexport const getCoordsInDirection = (\r\n  coords: Coords,\r\n  direction: string\r\n): Coords => {\r\n  if (direction === Direction.Up) {\r\n    return {\r\n      row: coords.row - 1,\r\n      col: coords.col,\r\n    };\r\n  }\r\n  if (direction === Direction.Rigth) {\r\n    return {\r\n      row: coords.row,\r\n      col: coords.col + 1,\r\n    };\r\n  }\r\n  if (direction === Direction.Down) {\r\n    return {\r\n      row: coords.row + 1,\r\n      col: coords.col,\r\n    };\r\n  }\r\n  if (direction === Direction.Left) {\r\n    return {\r\n      row: coords.row,\r\n      col: coords.col - 1,\r\n    };\r\n  }\r\n  return { row: 0, col: 0 };\r\n};\r\n\r\nexport const isOutOfBounds = (coords: Coords, grid: number[][]): boolean => {\r\n  const { row, col } = coords;\r\n  if (row < 0 || col < 0) return true;\r\n  if (row >= grid.length || col >= grid[0].length) return true;\r\n  return false;\r\n};\r\n\r\nexport const getDirectionFromKey = (key: string): string => {\r\n  if (key === \"ArrowUp\") return Direction.Up;\r\n  if (key === \"ArrowRight\") return Direction.Rigth;\r\n  if (key === \"ArrowDown\") return Direction.Down;\r\n  if (key === \"ArrowLeft\") return Direction.Left;\r\n  return \"\";\r\n};\r\n\r\nexport const getNextNodeDirection = (\r\n  node: LinkedListNode,\r\n  currentDirection: string\r\n): string => {\r\n  if (node.next === null) return currentDirection;\r\n  const { row: currentRow, col: currentCol } = node.value;\r\n  const { row: nextRow, col: nextCol } = node.next.value;\r\n  if (nextRow === currentRow && nextCol === currentCol + 1) {\r\n    return Direction.Rigth;\r\n  }\r\n  if (nextRow === currentRow && nextCol === currentCol - 1) {\r\n    return Direction.Left;\r\n  }\r\n  if (nextCol === currentCol && nextRow === currentRow + 1) {\r\n    return Direction.Down;\r\n  }\r\n  if (nextCol === currentCol && nextRow === currentRow - 1) {\r\n    return Direction.Up;\r\n  }\r\n  return \"\";\r\n};\r\n\r\nexport const getGrowthNodeCoords = (\r\n  snakeTail: LinkedListNode,\r\n  currentDirection: string\r\n): Coords => {\r\n  const tailNextNodeDirection = getNextNodeDirection(\r\n    snakeTail,\r\n    currentDirection\r\n  );\r\n  const growthDirection = getOppositeDirection(tailNextNodeDirection);\r\n  const currentTailCoords = {\r\n    row: snakeTail.value.row,\r\n    col: snakeTail.value.col,\r\n  };\r\n  const growthNodeCoords = getCoordsInDirection(\r\n    currentTailCoords,\r\n    growthDirection\r\n  );\r\n  return growthNodeCoords;\r\n};\r\n\r\nexport const getOppositeDirection = (direction: string): string => {\r\n  if (direction === Direction.Up) return Direction.Down;\r\n  if (direction === Direction.Rigth) return Direction.Left;\r\n  if (direction === Direction.Down) return Direction.Up;\r\n  if (direction === Direction.Left) return Direction.Rigth;\r\n  return \"\";\r\n};\r\n\r\nexport const getCellClassName = (\r\n  cellValue: number,\r\n  foodCell: number,\r\n  snakeCells: Set<number>\r\n) => {\r\n  let className = \"cell\";\r\n  if (cellValue === foodCell) {\r\n    className = \"cell cell-red\";\r\n  }\r\n  if (snakeCells.has(cellValue)) className = \"cell cell-green\";\r\n\r\n  return className;\r\n};\r\n","import { useEffect, useRef } from \"react\";\r\n\r\n// Скопировано из https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\r\nexport function randomIntFromInterval(min: number, max: number): number {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n\r\n// Скопировано из https://overreacted.io/making-setinterval-declarative-with-react-hooks/\r\nexport function useInterval(callback: () => void, delay: number) {\r\n  const savedCallback = useRef<() => void>(() => {});\r\n\r\n  // Remember the latest callback.\r\n  useEffect(() => {\r\n    savedCallback.current = callback;\r\n  }, [callback]);\r\n\r\n  // Set up the interval.\r\n  useEffect(() => {\r\n    function tick() {\r\n      savedCallback.current();\r\n    }\r\n    if (delay !== null) {\r\n      let id = setInterval(tick, delay);\r\n      return () => clearInterval(id);\r\n    }\r\n  }, [delay]);\r\n}\r\n","import React, { useState } from \"react\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\n\nimport \"./App.css\";\n\nimport Grid from \"./Grid\";\nimport StartingScreen from \"./StartingScreen\";\nimport GameOverScreen from \"./GameOverScreen\";\n\nenum GameStates {\n  START = \"start\",\n  GAME_OVER = \"game_over\",\n  PLAING = \"plaing\",\n}\n\nfunction App() {\n  const [score, setScore] = useState<number>(0);\n  const [gridRows, setGridRows] = useState<number>(15);\n  const [gridCols, setGridCols] = useState<number>(15);\n  const [gameState, setGameState] = useState<string>(GameStates.START);\n\n  const handleGameOver = () => {\n    setGameState(GameStates.GAME_OVER);\n  };\n\n  const handleResetGame = () => {\n    setGameState(GameStates.PLAING);\n    setScore(0);\n  };\n\n  const handleStartGame = () => {\n    setGameState(GameStates.PLAING);\n  };\n\n  const renderStage = (gameState: string): React.ReactNode => {\n    switch (gameState) {\n      case GameStates.START:\n        return (\n          <StartingScreen\n            handleStartGame={handleStartGame}\n            gridRows={gridRows}\n            gridCols={gridCols}\n            setGridCols={setGridCols}\n            setGridRows={setGridRows}\n          />\n        );\n      case GameStates.GAME_OVER:\n        return (\n          <GameOverScreen\n            score={score}\n            handleResetGame={handleResetGame}\n            gridRows={gridRows}\n            gridCols={gridCols}\n            setGridCols={setGridCols}\n            setGridRows={setGridRows}\n          />\n        );\n      case GameStates.PLAING:\n        return (\n          <Grid\n            gridRows={gridRows}\n            gridCols={gridCols}\n            handleGameOver={handleGameOver}\n            setScore={setScore}\n            score={score}\n          />\n        );\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <AppBar>\n        <Toolbar>\n          <Typography variant=\"h5\">Snake game. Score: {score}</Typography>\n        </Toolbar>\n      </AppBar>\n      <div className=\"container\">{renderStage(gameState)}</div>\n    </div>\n  );\n}\n\nexport default App;\n","import React, { useState, useEffect, FC } from \"react\";\r\nimport \"./grid.css\";\r\n\r\nimport {\r\n  createBoard,\r\n  ListNodeValue,\r\n  LinkedListNode,\r\n  LinkedList,\r\n  Direction,\r\n  getDirectionFromKey,\r\n  getCoordsInDirection,\r\n  isOutOfBounds,\r\n  getGrowthNodeCoords,\r\n  getCellClassName,\r\n} from \"./helpers\";\r\n\r\nimport { useInterval, randomIntFromInterval } from \"../utils\";\r\n\r\ninterface Props {\r\n  gridRows: number;\r\n  gridCols: number;\r\n  handleGameOver: () => void;\r\n  setScore: (score: number) => void;\r\n  score: number;\r\n}\r\n\r\nconst getStartingSnakeLLValue = (board: number[][]): ListNodeValue => {\r\n  const rowSize = board.length;\r\n  const colSize = board[0].length;\r\n  const startingRow = Math.round(rowSize / 2);\r\n  const startingCol = Math.round(colSize / 2);\r\n  const startingCell = board[startingRow][startingCol];\r\n  return {\r\n    row: startingRow,\r\n    col: startingCol,\r\n    cell: startingCell,\r\n  };\r\n};\r\n\r\nconst Grid: FC<Props> = ({\r\n  gridRows,\r\n  gridCols,\r\n  handleGameOver,\r\n  score,\r\n  setScore,\r\n}) => {\r\n  const maxPossibleCellValue = gridRows * gridCols;\r\n  const board = createBoard(gridRows, gridCols);\r\n  const [snake] = useState<LinkedList>(\r\n    new LinkedList(getStartingSnakeLLValue(board))\r\n  );\r\n  const [snakeCells, setSnakeCells] = useState<Set<number>>(\r\n    new Set([snake.head.value.cell])\r\n  );\r\n  const [foodCell, setFoodCell] = useState<number>(\r\n    randomIntFromInterval(1, maxPossibleCellValue)\r\n  );\r\n  const [direction, setDirection] = useState<string>(Direction.Rigth);\r\n  const [delay, setDelay] = useState<number>(150);\r\n\r\n  useEffect(() => {\r\n    window.addEventListener(\"keydown\", (e) => {\r\n      handleKeydown(e);\r\n    });\r\n  }, []);\r\n\r\n  useInterval(() => {\r\n    moveSnake();\r\n  }, delay);\r\n\r\n  const handleKeydown = (e: KeyboardEvent): void => {\r\n    const newDirection = getDirectionFromKey(e.key);\r\n    const isValidDirection = newDirection !== \"\";\r\n    if (!isValidDirection) return;\r\n    setDirection(newDirection);\r\n  };\r\n\r\n  const moveSnake = () => {\r\n    const currentHeadCoords = {\r\n      row: snake.head.value.row,\r\n      col: snake.head.value.col,\r\n    };\r\n\r\n    const nextHeadCoords = getCoordsInDirection(currentHeadCoords, direction);\r\n    if (isOutOfBounds(nextHeadCoords, board)) {\r\n      handleGameOver();\r\n      return;\r\n    }\r\n    const nextHeadCell = board[nextHeadCoords.row][nextHeadCoords.col];\r\n    if (snakeCells.has(nextHeadCell)) {\r\n      handleGameOver();\r\n      return;\r\n    }\r\n\r\n    const newHead = new LinkedListNode({\r\n      row: nextHeadCoords.row,\r\n      col: nextHeadCoords.col,\r\n      cell: nextHeadCell,\r\n    });\r\n    const currentHead = snake.head;\r\n    snake.head = newHead;\r\n    currentHead.next = newHead;\r\n\r\n    const newSnakeCells = new Set(snakeCells);\r\n    newSnakeCells.delete(snake.tail!.value.cell);\r\n    newSnakeCells.add(nextHeadCell);\r\n\r\n    snake.tail = snake.tail!.next;\r\n    if (snake.tail === null) snake.tail = snake.head;\r\n\r\n    const foodConsumed = nextHeadCell === foodCell;\r\n    if (foodConsumed) {\r\n      // This function mutates newSnakeCells.\r\n      growSnake(newSnakeCells);\r\n      handleFoodConsumption(newSnakeCells);\r\n      setDelay(delay - 5);\r\n    }\r\n\r\n    setSnakeCells(newSnakeCells);\r\n  };\r\n\r\n  // This function mutates newSnakeCells.\r\n  const growSnake = (newSnakeCells: Set<number>): void => {\r\n    const growthNodeCoords = getGrowthNodeCoords(snake.tail!, direction);\r\n    if (isOutOfBounds(growthNodeCoords, board)) {\r\n      return;\r\n    }\r\n    const newTailCell = board[growthNodeCoords.row][growthNodeCoords.col];\r\n    const newTail = new LinkedListNode({\r\n      row: growthNodeCoords.row,\r\n      col: growthNodeCoords.col,\r\n      cell: newTailCell,\r\n    });\r\n    const currentTail = snake.tail;\r\n    snake.tail = newTail;\r\n    snake.tail.next = currentTail;\r\n\r\n    newSnakeCells.add(newTailCell);\r\n    setSnakeCells(newSnakeCells);\r\n  };\r\n\r\n  const handleFoodConsumption = (newSnakeCells: Set<number>): void => {\r\n    let nextFoodCell;\r\n    while (true) {\r\n      nextFoodCell = randomIntFromInterval(1, maxPossibleCellValue);\r\n      if (newSnakeCells.has(nextFoodCell) || foodCell === nextFoodCell)\r\n        continue;\r\n      break;\r\n    }\r\n\r\n    setFoodCell(nextFoodCell);\r\n    setScore(score + 1);\r\n  };\r\n\r\n  return (\r\n    <div className=\"grid\">\r\n      {board.map((row, rowIndex) => (\r\n        <div key={rowIndex} className=\"row\">\r\n          {row.map((cell, cellIndex) => {\r\n            const className = getCellClassName(cell, foodCell, snakeCells);\r\n            return <div key={cellIndex} className={className}></div>;\r\n          })}\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Grid;\r\n","import React from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport { Typography } from \"@material-ui/core\";\r\n\r\ninterface Props {\r\n  handleSubmit: () => void;\r\n  gridRows: number;\r\n  gridCols: number;\r\n  setGridRows: (v: number) => void;\r\n  setGridCols: (v: number) => void;\r\n  isStartScreen: boolean;\r\n}\r\n\r\nconst Form: React.FC<Props> = ({\r\n  handleSubmit,\r\n  gridCols,\r\n  gridRows,\r\n  setGridCols,\r\n  setGridRows,\r\n  isStartScreen,\r\n}) => (\r\n  <form onSubmit={handleSubmit} className=\"start-form\">\r\n    <Typography variant=\"h5\">\r\n      Start game by pressing {isStartScreen ? '\"Start game\"' : '\"Restart game\"'}{\" \"}\r\n      button\r\n    </Typography>\r\n    <div className=\"text-fields\">\r\n      <TextField\r\n        variant=\"outlined\"\r\n        required\r\n        id=\"gridRows\"\r\n        label=\"Number of rows\"\r\n        defaultValue={15}\r\n        type=\"number\"\r\n        InputProps={{ inputProps: { min: 10, max: 20 } }}\r\n        value={gridRows}\r\n        onChange={(e) => setGridRows(Number(e.target.value))}\r\n        style={{ width: 200 }}\r\n      />\r\n      <TextField\r\n        required\r\n        variant=\"outlined\"\r\n        id=\"gridCols\"\r\n        label=\"Number of columns\"\r\n        defaultValue={15}\r\n        type=\"number\"\r\n        InputProps={{ inputProps: { min: 10, max: 25 } }}\r\n        value={gridCols}\r\n        onChange={(e) => setGridCols(Number(e.target.value))}\r\n        style={{ width: 200 }}\r\n      />\r\n    </div>\r\n    <Button color=\"primary\" size=\"large\" variant=\"contained\" type=\"submit\">\r\n      {isStartScreen ? \"Start game\" : \"Restart game\"}\r\n    </Button>\r\n  </form>\r\n);\r\n\r\nexport default Form;\r\n","import React from \"react\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Form from \"../Form\";\r\nimport \"./StartingScreen.css\";\r\n\r\ninterface Props {\r\n  handleStartGame: () => void;\r\n  gridRows: number;\r\n  gridCols: number;\r\n  setGridRows: (v: number) => void;\r\n  setGridCols: (v: number) => void;\r\n}\r\n\r\nconst StartingScreen: React.FC<Props> = ({\r\n  handleStartGame,\r\n  gridRows,\r\n  gridCols,\r\n  setGridCols,\r\n  setGridRows,\r\n}) => {\r\n  return (\r\n    <Paper elevation={3} className=\"start-screen\">\r\n      <Form\r\n        handleSubmit={handleStartGame}\r\n        gridCols={gridCols}\r\n        gridRows={gridRows}\r\n        setGridCols={setGridCols}\r\n        setGridRows={setGridRows}\r\n        isStartScreen\r\n      />\r\n    </Paper>\r\n  );\r\n};\r\n\r\nexport default StartingScreen;\r\n","import React from \"react\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Form from \"../Form\";\r\nimport { Typography } from \"@material-ui/core\";\r\n\r\ninterface Props {\r\n  handleResetGame: () => void;\r\n  gridRows: number;\r\n  gridCols: number;\r\n  setGridRows: (v: number) => void;\r\n  setGridCols: (v: number) => void;\r\n  score: number;\r\n}\r\n\r\nconst GameOverScreen: React.FC<Props> = ({\r\n  score,\r\n  handleResetGame,\r\n  gridCols,\r\n  gridRows,\r\n  setGridCols,\r\n  setGridRows,\r\n}) => {\r\n  return (\r\n    <Paper elevation={3} className=\"start-screen\">\r\n      <Typography variant=\"h4\">Your score is - {score}</Typography>\r\n      <Form\r\n        handleSubmit={handleResetGame}\r\n        gridCols={gridCols}\r\n        gridRows={gridRows}\r\n        setGridCols={setGridCols}\r\n        setGridRows={setGridRows}\r\n        isStartScreen={false}\r\n      />\r\n    </Paper>\r\n  );\r\n};\r\n\r\nexport default GameOverScreen;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}